#+TITLE: Excel Library
#+AUTHOR: Pablo A. Perez-Fernandez, Ph.D.
#+DATE: February 9, 2016
#+EMAIL: Pablo_A_Perez_Fernandez@yahoo.com
#+INFOJS_OPT: view:info
#+OPTIONS: toc:2

* Quick Links to Versions
* VERSION 6.0
** DESCRIPTION
   This library includes a number of functions to simplify the coding of data-intensive applications using
   vectorial and tabular formats (e.g. 1D arrays and rectangular matrices populated with numbers and strings).
   By convention, we fully spell out all function names, starting with a lower case and capitalizing the first
   word of each subsequent word.

   We highly recommend checking out the unit testing file for examples of how to use the library and what to
   expect from various input combinations.  In general, functions return Null or Nothing when the parameters
   violate one or more restrictions.  For instance, the addition of two vectors of different length is not
   defined.  Every function in the source file has a detailed prototype explaining the function's purpose,
   expected parameters, and conditions causing it to return Null or Nothing.

   This library was built to deal with data sets using high-level primitives in the tradition of
   /Mathematica/.  We use VBA's arrays in place of Mathematica's lists, and we have implemented
   /Mathematica/'s fundamental, functional primitives such as First, Last, Most, Rest, GroupBy, MatrixQ, Take,
   Drop, Union, Intersection and Flatten.  It is our experience that they speed up development and prevent
   errors.
** REQUIREMENTS and INSTALLATION
   This library was written under 32-bit Excel 2010.  It may work in later version since I tend to use
   standard VBA functionality.  To use the library, copy it to some directory and add a VBA project reference
   to the library's XLAM file.  This library is meant to be used as an add-in, but it is just as easy to
   save it as an XLSB (smaller and faster to load) or XLSM file.
** FUNCTIONAL OVERVIEW
   This section categorizes the library's functions and provides a simple description of their purpose.
*** PREDICATES
    These functions return Booleans.  Their names all end in Q --for question.

    - *DimensionedQ* - Returns True if its argument is an array that has been dimensioned --possibly empty.
      It returns false otherwise.
** DETAILED FUNCTIONAL PROTOTYPES
*** *PREDICATES*
**** matrix.deepEqualQ
#+BEGIN_EXAMPLE

#+END_EXAMPLE
